services:
  database:
    image: postgres:16.1-alpine3.18
    container_name: pg-docker
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-module1}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  core-service:
    image: sekretaria/corelab12
    container_name: core-service
    restart: always
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network
    mem_limit: ${APP_MEM_LIMIT}
    cpus: ${APP_CPU_LIMIT}
    environment:
      DB_HOST: ${DB_HOST:-database}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-module1}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      DDL_AUTO: update
      SHOW_SQL: ${SHOW_SQL}
      FLYWAY_ENABLED: true
      FLYWAY_BASELINE: true
      TOMCAT_THREADS: ${TOMCAT_THREADS}
      CORE_SERVICE_PORT: ${SERVER_PORT}

  additional-app:
    image: sekretaria/joinlab9
    container_name: additional-app
    restart: always
    depends_on:
      - core-service
    ports:
      - "8082:8082"
    networks:
      - app-network
    mem_limit: ${APP_MEM_LIMIT}
    cpus: ${APP_CPU_LIMIT}
    environment:
      CORE_SERVICE_HOST: ${CORE_SERVICE_HOST}
      CORE_SERVICE_PORT: ${CORE_SERVICE_PORT}
      SERVER_PORT: ${SERVER_PORT}
      TOMCAT_THREADS: ${TOMCAT_THREADS}
      KAFKA_HOSTS: ${KAFKA_HOSTS:-hl22.zil:9094,hl23.zil:9094}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-esecretareva-consumer-group}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-var15}
      KAFKA_CONCURRENCY: ${KAFKA_CONCURRENCY:-2}

networks:
  app-network:
    driver: bridge
